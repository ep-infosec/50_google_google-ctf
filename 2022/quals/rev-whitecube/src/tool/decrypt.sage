#!/usr/bin/env sage

import struct

F = Integers(256)
Fm = MatrixSpace(F, 16, 16)

diffusion = [97, 99, 230, 168, 121, 240, 47, 200, 161, 90, 131, 166, 230, 241, 25, 229, 15, 64, 107, 189, 45, 74, 250, 253, 19, 170, 8, 187, 32, 213, 62, 152, 52, 43, 122, 150, 186, 206, 37, 0, 128, 155, 122, 62, 19, 243, 171, 163, 185, 201, 236, 145, 66, 29, 174, 53, 228, 169, 40, 167, 18, 81, 232, 71, 66, 230, 63, 241, 38, 48, 99, 15, 9, 87, 218, 129, 155, 49, 127, 38, 249, 166, 197, 197, 103, 157, 64, 65, 141, 223, 248, 4, 143, 102, 140, 83, 233, 237, 230, 238, 159, 174, 119, 30, 21, 0, 1, 169, 94, 195, 55, 199, 93, 203, 103, 85, 162, 218, 170, 75, 74, 176, 89, 6, 179, 35, 230, 159, 32, 220, 26, 42, 174, 150, 139, 21, 150, 129, 159, 80, 250, 190, 185, 91, 79, 107, 46, 107, 213, 19, 249, 96, 237, 60, 253, 110, 138, 15, 18, 208, 97, 170, 84, 117, 71, 248, 64, 117, 154, 63, 153, 246, 193, 103, 4, 54, 239, 220, 148, 50, 205, 198, 220, 218, 21, 208, 133, 174, 41, 64, 96, 176, 219, 149, 251, 120, 143, 212, 45, 108, 157, 128, 77, 54, 191, 239, 51, 2, 240, 203, 104, 165, 0, 146, 51, 25, 83, 18, 41, 96, 254, 246, 82, 181, 70, 33, 34, 248, 218, 38, 194, 61, 170, 117, 178, 15, 38, 1, 53, 181, 191, 255, 204, 54, 117, 102, 158, 149, 85, 154, 85, 118, 124, 16, 246, 196]
k0 = [102, 113, 196, 7, 244, 112, 241, 233, 88, 31, 2, 14, 0, 36, 198, 127, 148, 233, 70, 143, 136, 186, 255, 243, 127, 8, 167, 135, 162, 59, 130, 23, 54, 219, 128, 123, 121, 107, 97, 247, 108, 220, 119, 210, 51, 108, 199, 35, 11, 96, 97, 211, 170, 182, 18, 13, 173, 183, 47, 34, 235, 40, 106, 63, 214, 195, 54, 211, 116, 120, 111, 129, 204, 180, 127, 130, 57, 254, 96, 214, 22, 88, 194, 111, 29, 3, 86, 78, 57, 96, 52, 149, 138, 242, 115, 115, 220, 98, 105, 122, 140, 90, 110, 71, 106, 139, 56, 200, 146, 98, 223, 8, 102, 195, 161, 191, 27, 76, 83, 206, 196, 10, 91, 38, 127, 235, 233, 194, 218, 150, 76, 9, 115, 138, 165, 112, 249, 84, 221, 18, 245, 168, 254, 24, 11, 40, 128, 62, 73, 22, 221, 157, 80, 145, 143, 69, 158, 14, 8, 191, 116, 241, 42, 32, 201, 234, 138, 200, 72, 190, 26, 211, 15, 248, 12, 174, 135, 236, 87, 133, 105, 169, 225, 38, 162, 189, 114, 230, 44, 50, 192, 32, 243, 198, 4, 13, 250, 27, 194, 236, 219, 73, 239, 179, 44, 10, 22, 84, 166, 115, 160, 124, 75, 84, 102, 132, 219, 211, 229, 147, 155, 182, 255, 15, 79, 254, 137, 57, 137, 10, 33, 28, 48, 252, 164, 139, 91, 78, 202, 47, 32, 55, 201, 238, 218, 136, 98, 2, 232, 225, 246, 176, 224, 87, 149, 16]
k1 = [102, 140, 9, 159, 146, 171, 34, 115, 44, 3, 165, 41, 149, 212, 189, 106, 85, 247, 246, 186, 201, 161, 209, 206, 220, 57, 214, 223, 3, 115, 34, 169, 19, 54, 179, 204, 231, 63, 147, 254, 249, 250, 62, 41, 230, 47, 50, 2, 195, 25, 52, 57, 2, 78, 121, 112, 115, 38, 183, 194, 174, 244, 101, 130, 203, 32, 231, 58, 231, 158, 156, 217, 49, 33, 90, 94, 14, 65, 176, 61, 40, 174, 168, 129, 167, 125, 216, 234, 78, 143, 78, 129, 212, 246, 227, 204, 210, 27, 203, 52, 103, 166, 72, 142, 76, 91, 150, 233, 128, 105, 96, 173, 103, 100, 105, 110, 212, 164, 241, 62, 16, 176, 111, 221, 18, 41, 190, 201, 17, 110, 143, 237, 125, 200, 159, 26, 76, 66, 10, 1, 144, 11, 136, 254, 237, 169, 212, 124, 199, 11, 159, 201, 204, 213, 17, 23, 161, 27, 71, 167, 24, 96, 199, 221, 26, 76, 109, 55, 245, 171, 230, 224, 7, 13, 28, 75, 111, 146, 40, 36, 199, 39, 160, 26, 147, 245, 49, 151, 84, 32, 154, 12, 123, 201, 191, 240, 65, 218, 71, 185, 214, 3, 182, 80, 1, 2, 27, 128, 248, 90, 43, 137, 103, 174, 5, 239, 54, 68, 58, 50, 146, 243, 75, 175, 247, 195, 225, 147, 198, 170, 113, 213, 42, 16, 32, 60, 133, 93, 4, 63, 60, 245, 14, 192, 54, 134, 222, 201, 187, 146, 101, 57, 202, 45, 75, 247]
k2 = [212, 136, 54, 35, 164, 44, 202, 26, 87, 50, 22, 190, 80, 248, 43, 96, 51, 37, 242, 228, 217, 235, 154, 242, 220, 40, 2, 147, 99, 130, 116, 211, 251, 62, 184, 61, 127, 143, 239, 110, 116, 147, 99, 185, 165, 48, 182, 61, 31, 3, 241, 203, 198, 129, 95, 175, 20, 16, 232, 61, 180, 48, 73, 117, 106, 177, 73, 154, 246, 180, 203, 131, 56, 133, 9, 105, 178, 45, 112, 213, 160, 234, 113, 60, 83, 197, 39, 70, 245, 53, 123, 248, 206, 189, 175, 62, 232, 3, 72, 94, 169, 92, 154, 109, 82, 141, 29, 183, 43, 36, 125, 113, 156, 191, 34, 168, 21, 249, 91, 234, 175, 91, 145, 22, 128, 18, 252, 237, 49, 120, 65, 68, 99, 30, 225, 200, 96, 215, 215, 140, 239, 177, 66, 78, 0, 152, 23, 115, 250, 161, 142, 94, 156, 136, 186, 73, 206, 39, 221, 76, 254, 100, 255, 9, 175, 7, 98, 212, 68, 67, 152, 176, 117, 194, 150, 25, 128, 73, 44, 219, 18, 179, 92, 220, 49, 45, 47, 179, 93, 78, 147, 139, 43, 117, 101, 50, 172, 167, 103, 33, 117, 79, 149, 173, 36, 165, 52, 176, 90, 108, 62, 83, 96, 8, 251, 116, 123, 104, 32, 112, 81, 159, 14, 175, 117, 232, 25, 43, 136, 33, 180, 141, 161, 82, 56, 174, 20, 126, 5, 99, 187, 204, 214, 151, 109, 79, 214, 11, 60, 76, 160, 184, 81, 171, 126, 88]
diffusion = matrix(F, 16, diffusion)
k0 = matrix(F, 16, k0)
k1 = matrix(F, 16, k1)
k2 = matrix(F, 16, k2)
diffusion_inv = diffusion.inverse()

#print(diffusion)

#with open('encrypted.dat', 'rb') as fin:
#with open('/mnt/hgfs/Share/whitecube/data.dat', 'rb') as fin:
#with open('/mnt/hgfs/Share/whitecube/test.out', 'rb') as fin:
with open('/mnt/hgfs/Share/whitecube/flag.enc', 'rb') as fin:
    plaintext_len = struct.unpack('<Q', fin.read(8))[0]
    nonce_elements = fin.read(12)
    ciphertext = fin.read()

nonce = identity_matrix(F, 16)
for i, x in enumerate(nonce_elements):
    nonce[i,i] = x
nonce_inv = nonce.inverse()

def data_to_matrix(data, transpose=False):
    data_mat = None
    for y in range(4):
        row = None
        for x in range(4):
            submatrix_elements, data = data[:16], data[16:]
            submatrix = matrix(F, 4, submatrix_elements)
            if transpose: submatrix = submatrix.transpose()
            row = row.augment(submatrix) if row else submatrix
        data_mat = data_mat.stack(row) if data_mat else row
    return data_mat

def data_to_matrices(data):
    res = []
    while len(data) > 0:
        chunk, data = data[:256], data[256:]
        #submatrices = []
        data_mat = data_to_matrix(chunk)
        #data_mat = matrix(F, 16, chunk)

        res.append(data_mat)
    return res

def glsl_mat16_to_data(matrix):
    data = []
    for y in range(4):
        for x in range(4):
            submatrix = matrix.matrix_from_rows_and_columns(list(range(4*y, 4*(y+1))), list(range(4*x, 4*(x+1))))
            data += submatrix.list()
    return data

matrices = data_to_matrices(ciphertext)

res = []
block_index = 0
while len(matrices) > 0:
    block, matrices = matrices[:4], matrices[4:]
    nonce[12,12] = 2*(block_index+1)-1
    nonce_inv = nonce.inverse()
    block_index += 1

    #print('M0:')
    block_in = block
    for iteration in range(8):
        block_out = []

        block_in = [sub * diffusion_inv for sub in block_in]
        block_in = [sub * nonce_inv for sub in block_in]

        for i in range(4):
            if i == 0:
                M0 = matrix(F, 16, [0]*16*16)
            elif i == 1:
                M0 = block_out[i-1].list()
                # 126.0 * (1.0+sin(m[i][col][row]));
                M0 = [int(126*(1.0+sin(float(x)))) for x in M0]
                M0 = matrix(F, 16, M0)
                M0 = M0 * k0
            elif i == 2:
                M0 = block_out[i-1].list()
                # 126.0 * (1.0+cos(m[i][col][row]));
                M0 = [int(126*(1.0+cos(float(x)))) for x in M0]    
                M0 = matrix(F, 16, M0)
                M0 = M0 * k1
            elif i == 3:
                M0 = block_out[i-1].list()
                # 126.0 * (1.0+tan((m[i][col][row]-127.0)/256.0));
                M0 = [int(126*(1.0+tan((float(x)-127.0)/256.0))) for x in M0]
                M0 = matrix(F, 16, M0)
                M0 = M0 * k2

            submatrix = block_in[(i-1) % 4] - M0
            block_out.append(submatrix)
        block_in = block_out
    plain = block_out

    for m in plain:
        #print(m)
        #print('-'*5)
        #print(bytes(glsl_mat16_to_data(m)).hex())
        res += glsl_mat16_to_data(m)

res = bytes(res)[:plaintext_len]
#print(res.hex())

with open('decrypted.png', 'wb') as fout:
    fout.write(res)
