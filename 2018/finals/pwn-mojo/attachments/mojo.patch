Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
diff --git a/mojo/core/core.cc b/mojo/core/core.cc
index 8422ec247a40..031219872975 100644
--- a/mojo/core/core.cc
+++ b/mojo/core/core.cc
@@ -762,6 +762,20 @@ MojoResult Core::WriteData(MojoHandle data_pipe_producer_handle,
   return dispatcher->WriteData(elements, num_bytes, validated_options);
 }
 
+MojoResult Core::SetWriteOffset(MojoHandle data_pipe_producer_handle,
+                                uint32_t write_offset) {
+  RequestContext request_context;
+  scoped_refptr<Dispatcher> dispatcher(
+      GetDispatcher(data_pipe_producer_handle));
+  if (!dispatcher)
+    return MOJO_RESULT_INVALID_ARGUMENT;
+
+  DataPipeProducerDispatcher* ptr = (DataPipeProducerDispatcher*)dispatcher.get();
+  ptr->SetWriteOffset(write_offset);
+
+  return MOJO_RESULT_OK;
+}
+
 MojoResult Core::BeginWriteData(MojoHandle data_pipe_producer_handle,
                                 const MojoBeginWriteDataOptions* options,
                                 void** buffer,
@@ -797,6 +811,20 @@ MojoResult Core::EndWriteData(MojoHandle data_pipe_producer_handle,
   return dispatcher->EndWriteData(num_bytes_written);
 }
 
+MojoResult Core::SetReadOffset(MojoHandle data_pipe_consumer_handle,
+                               uint32_t read_offset) {
+  RequestContext request_context;
+  scoped_refptr<Dispatcher> dispatcher(
+      GetDispatcher(data_pipe_consumer_handle));
+  if (!dispatcher)
+    return MOJO_RESULT_INVALID_ARGUMENT;
+
+  DataPipeConsumerDispatcher* ptr = (DataPipeConsumerDispatcher*)dispatcher.get();
+  ptr->SetReadOffset(read_offset);
+
+  return MOJO_RESULT_OK;
+}
+
 MojoResult Core::ReadData(MojoHandle data_pipe_consumer_handle,
                           const MojoReadDataOptions* options,
                           void* elements,
diff --git a/mojo/core/core.h b/mojo/core/core.h
index 2840bc5e6809..694570a75414 100644
--- a/mojo/core/core.h
+++ b/mojo/core/core.h
@@ -236,6 +236,8 @@ class MOJO_SYSTEM_IMPL_EXPORT Core {
   MojoResult CreateDataPipe(const MojoCreateDataPipeOptions* options,
                             MojoHandle* data_pipe_producer_handle,
                             MojoHandle* data_pipe_consumer_handle);
+  MojoResult SetWriteOffset(MojoHandle data_pipe_producer_handle,
+                            uint32_t write_offset);
   MojoResult WriteData(MojoHandle data_pipe_producer_handle,
                        const void* elements,
                        uint32_t* num_bytes,
@@ -247,6 +249,8 @@ class MOJO_SYSTEM_IMPL_EXPORT Core {
   MojoResult EndWriteData(MojoHandle data_pipe_producer_handle,
                           uint32_t num_bytes_written,
                           const MojoEndWriteDataOptions* options);
+  MojoResult SetReadOffset(MojoHandle data_pipe_consumer_handle,
+                           uint32_t read_offset);
   MojoResult ReadData(MojoHandle data_pipe_consumer_handle,
                       const MojoReadDataOptions* options,
                       void* elements,
diff --git a/mojo/core/data_pipe_consumer_dispatcher.cc b/mojo/core/data_pipe_consumer_dispatcher.cc
index 89fbcde5e7e6..d4cb9d0ae267 100644
--- a/mojo/core/data_pipe_consumer_dispatcher.cc
+++ b/mojo/core/data_pipe_consumer_dispatcher.cc
@@ -370,12 +370,12 @@ DataPipeConsumerDispatcher::Deserialize(const void* data,
   }
 
   const SerializedState* state = static_cast<const SerializedState*>(data);
-  if (!state->options.capacity_num_bytes || !state->options.element_num_bytes ||
-      state->options.capacity_num_bytes < state->options.element_num_bytes ||
-      state->read_offset >= state->options.capacity_num_bytes ||
-      state->bytes_available > state->options.capacity_num_bytes) {
-    return nullptr;
-  }
+  //if (!state->options.capacity_num_bytes || !state->options.element_num_bytes ||
+  //    state->options.capacity_num_bytes < state->options.element_num_bytes ||
+  //    state->read_offset >= state->options.capacity_num_bytes ||
+  //    state->bytes_available > state->options.capacity_num_bytes) {
+  //  return nullptr;
+  //}
 
   NodeController* node_controller = Core::Get()->GetNodeController();
   ports::PortRef port;
diff --git a/mojo/core/data_pipe_consumer_dispatcher.h b/mojo/core/data_pipe_consumer_dispatcher.h
index 982d3f055a02..0f076ec63a5b 100644
--- a/mojo/core/data_pipe_consumer_dispatcher.h
+++ b/mojo/core/data_pipe_consumer_dispatcher.h
@@ -41,6 +41,9 @@ class MOJO_SYSTEM_IMPL_EXPORT DataPipeConsumerDispatcher final
   // Dispatcher:
   Type GetType() const override;
   MojoResult Close() override;
+  inline void SetReadOffset(uint32_t read_offset) {
+    read_offset_ = read_offset;
+  }
   MojoResult ReadData(const MojoReadDataOptions& validated_options,
                       void* elements,
                       uint32_t* num_bytes) override;
diff --git a/mojo/core/data_pipe_producer_dispatcher.cc b/mojo/core/data_pipe_producer_dispatcher.cc
index 201b9762bde5..c7ad232c690c 100644
--- a/mojo/core/data_pipe_producer_dispatcher.cc
+++ b/mojo/core/data_pipe_producer_dispatcher.cc
@@ -331,12 +331,12 @@ DataPipeProducerDispatcher::Deserialize(const void* data,
   }
 
   const SerializedState* state = static_cast<const SerializedState*>(data);
-  if (!state->options.capacity_num_bytes || !state->options.element_num_bytes ||
-      state->options.capacity_num_bytes < state->options.element_num_bytes ||
-      state->write_offset >= state->options.capacity_num_bytes ||
-      state->available_capacity > state->options.capacity_num_bytes) {
-    return nullptr;
-  }
+  //if (!state->options.capacity_num_bytes || !state->options.element_num_bytes ||
+  //    state->options.capacity_num_bytes < state->options.element_num_bytes ||
+  //    state->write_offset >= state->options.capacity_num_bytes ||
+  //    state->available_capacity > state->options.capacity_num_bytes) {
+  //  return nullptr;
+  //}
 
   NodeController* node_controller = Core::Get()->GetNodeController();
   ports::PortRef port;
diff --git a/mojo/core/data_pipe_producer_dispatcher.h b/mojo/core/data_pipe_producer_dispatcher.h
index 15cd1c9b0de0..649f211af4e0 100644
--- a/mojo/core/data_pipe_producer_dispatcher.h
+++ b/mojo/core/data_pipe_producer_dispatcher.h
@@ -41,6 +41,9 @@ class MOJO_SYSTEM_IMPL_EXPORT DataPipeProducerDispatcher final
   // Dispatcher:
   Type GetType() const override;
   MojoResult Close() override;
+  inline void SetWriteOffset(uint32_t write_offset) {
+    write_offset_ = write_offset;
+  }
   MojoResult WriteData(const void* elements,
                        uint32_t* num_bytes,
                        const MojoWriteDataOptions& options) override;
diff --git a/mojo/core/entrypoints.cc b/mojo/core/entrypoints.cc
index 42e741719227..f4309619e616 100644
--- a/mojo/core/entrypoints.cc
+++ b/mojo/core/entrypoints.cc
@@ -135,6 +135,11 @@ MojoResult MojoCreateDataPipeImpl(const MojoCreateDataPipeOptions* options,
                                 data_pipe_consumer_handle);
 }
 
+MojoResult MojoSetWriteOffsetImpl(MojoHandle data_pipe_producer_handle,
+                                  uint32_t write_offset) {
+  return g_core->SetWriteOffset(data_pipe_producer_handle, write_offset);
+}
+
 MojoResult MojoWriteDataImpl(MojoHandle data_pipe_producer_handle,
                              const void* elements,
                              uint32_t* num_elements,
@@ -158,6 +163,11 @@ MojoResult MojoEndWriteDataImpl(MojoHandle data_pipe_producer_handle,
                               options);
 }
 
+MojoResult MojoSetReadOffsetImpl(MojoHandle data_pipe_consumer_handle,
+                                 uint32_t read_offset) {
+  return g_core->SetReadOffset(data_pipe_consumer_handle, read_offset);
+}
+
 MojoResult MojoReadDataImpl(MojoHandle data_pipe_consumer_handle,
                             const MojoReadDataOptions* options,
                             void* elements,
@@ -365,9 +375,11 @@ MojoSystemThunks g_thunks = {sizeof(MojoSystemThunks),
                              MojoGetMessageContextImpl,
                              MojoNotifyBadMessageImpl,
                              MojoCreateDataPipeImpl,
+                             MojoSetWriteOffsetImpl,
                              MojoWriteDataImpl,
                              MojoBeginWriteDataImpl,
                              MojoEndWriteDataImpl,
+                             MojoSetReadOffsetImpl,
                              MojoReadDataImpl,
                              MojoBeginReadDataImpl,
                              MojoEndReadDataImpl,
diff --git a/mojo/public/c/system/data_pipe.h b/mojo/public/c/system/data_pipe.h
index 3702cdb62493..254c30ee94e9 100644
--- a/mojo/public/c/system/data_pipe.h
+++ b/mojo/public/c/system/data_pipe.h
@@ -211,6 +211,10 @@ MojoCreateDataPipe(const struct MojoCreateDataPipeOptions* options,
                    MojoHandle* data_pipe_producer_handle,
                    MojoHandle* data_pipe_consumer_handle);
 
+MOJO_SYSTEM_EXPORT MojoResult
+MojoSetWriteOffset(MojoHandle data_pipe_producer_handle,
+                   uint32_t write_offset);
+
 // Writes the data pipe producer given by |data_pipe_producer_handle|.
 //
 // |elements| points to data of size |*num_bytes|; |*num_bytes| must be a
@@ -307,6 +311,10 @@ MojoEndWriteData(MojoHandle data_pipe_producer_handle,
                  uint32_t num_bytes_written,
                  const struct MojoEndWriteDataOptions* options);
 
+MOJO_SYSTEM_EXPORT MojoResult
+MojoSetReadOffset(MojoHandle data_pipe_consumer_handle,
+                  uint32_t read_offset);
+
 // Reads data from the data pipe consumer given by |data_pipe_consumer_handle|.
 // May also be used to discard data or query the amount of data available.
 //
diff --git a/mojo/public/c/system/thunks.cc b/mojo/public/c/system/thunks.cc
index cffef2cc50c2..9d4fb42102e3 100644
--- a/mojo/public/c/system/thunks.cc
+++ b/mojo/public/c/system/thunks.cc
@@ -199,6 +199,11 @@ MojoResult MojoCreateDataPipe(const MojoCreateDataPipeOptions* options,
                       data_pipe_consumer_handle);
 }
 
+MojoResult MojoSetWriteOffset(MojoHandle data_pipe_producer_handle,
+                         uint32_t write_offset) {
+  return INVOKE_THUNK(SetWriteOffset, data_pipe_producer_handle, write_offset);
+}
+
 MojoResult MojoWriteData(MojoHandle data_pipe_producer_handle,
                          const void* elements,
                          uint32_t* num_elements,
@@ -222,6 +227,11 @@ MojoResult MojoEndWriteData(MojoHandle data_pipe_producer_handle,
                       num_elements_written, options);
 }
 
+MojoResult MojoSetReadOffset(MojoHandle data_pipe_consumer_handle,
+                             uint32_t read_offset) {
+  return INVOKE_THUNK(SetReadOffset, data_pipe_consumer_handle, read_offset);
+}
+
 MojoResult MojoReadData(MojoHandle data_pipe_consumer_handle,
                         const MojoReadDataOptions* options,
                         void* elements,
diff --git a/mojo/public/c/system/thunks.h b/mojo/public/c/system/thunks.h
index 1e5e2493c7e2..d1cb0133e903 100644
--- a/mojo/public/c/system/thunks.h
+++ b/mojo/public/c/system/thunks.h
@@ -99,6 +99,8 @@ struct MojoSystemThunks {
   MojoResult (*CreateDataPipe)(const struct MojoCreateDataPipeOptions* options,
                                MojoHandle* data_pipe_producer_handle,
                                MojoHandle* data_pipe_consumer_handle);
+  MojoResult (*SetWriteOffset)(MojoHandle data_pipe_producer_handle,
+                               uint32_t write_offset);
   MojoResult (*WriteData)(MojoHandle data_pipe_producer_handle,
                           const void* elements,
                           uint32_t* num_elements,
@@ -110,6 +112,8 @@ struct MojoSystemThunks {
   MojoResult (*EndWriteData)(MojoHandle data_pipe_producer_handle,
                              uint32_t num_elements_written,
                              const struct MojoEndWriteDataOptions* options);
+  MojoResult (*SetReadOffset)(MojoHandle data_pipe_consumer_handle,
+                              uint32_t read_offset);
   MojoResult (*ReadData)(MojoHandle data_pipe_consumer_handle,
                          const struct MojoReadDataOptions* options,
                          void* elements,
diff --git a/mojo/public/cpp/system/data_pipe.h b/mojo/public/cpp/system/data_pipe.h
index 30c754646118..6749cafc4e06 100644
--- a/mojo/public/cpp/system/data_pipe.h
+++ b/mojo/public/cpp/system/data_pipe.h
@@ -28,6 +28,10 @@ class DataPipeProducerHandle : public Handle {
   DataPipeProducerHandle() {}
   explicit DataPipeProducerHandle(MojoHandle value) : Handle(value) {}
 
+  MojoResult SetWriteOffset(uint32_t write_offset) const {
+    return MojoSetWriteOffset(value(), write_offset);
+  }
+
   // Writes to a data pipe. See |MojoWriteData| for complete documentation.
   MojoResult WriteData(const void* elements,
                        uint32_t* num_bytes,
@@ -73,6 +77,10 @@ class DataPipeConsumerHandle : public Handle {
   DataPipeConsumerHandle() {}
   explicit DataPipeConsumerHandle(MojoHandle value) : Handle(value) {}
 
+  MojoResult SetReadOffset(uint32_t read_offset) const {
+    return MojoSetReadOffset(value(), read_offset);
+  }
+
   // Reads from a data pipe. See |MojoReadData()| for complete documentation.
   MojoResult ReadData(void* elements,
                       uint32_t* num_bytes,
diff --git a/third_party/blink/renderer/core/fileapi/file_reader.cc b/third_party/blink/renderer/core/fileapi/file_reader.cc
index a875dcfde102..b6e2dce1479a 100644
--- a/third_party/blink/renderer/core/fileapi/file_reader.cc
+++ b/third_party/blink/renderer/core/fileapi/file_reader.cc
@@ -228,6 +228,12 @@ bool FileReader::HasPendingActivity() const {
   return state_ == kLoading || still_firing_events_;
 }
 
+void FileReader::readAsArrayBuffer(Blob* blob, unsigned int write_offset,
+                                   ExceptionState& exception_state) {
+  write_offset_ = write_offset;
+  readAsArrayBuffer(blob, exception_state);
+}
+
 void FileReader::readAsArrayBuffer(Blob* blob,
                                    ExceptionState& exception_state) {
   DCHECK(blob);
@@ -318,6 +324,7 @@ void FileReader::ExecutePendingRead() {
   loader_ = FileReaderLoader::Create(read_type_, this);
   loader_->SetEncoding(encoding_);
   loader_->SetDataType(blob_type_);
+  loader_->SetWriteOffset(write_offset_);
   loader_->Start(blob_data_handle_);
   blob_data_handle_ = nullptr;
 }
diff --git a/third_party/blink/renderer/core/fileapi/file_reader.h b/third_party/blink/renderer/core/fileapi/file_reader.h
index 94649ffc3686..0fed5e9ea71b 100644
--- a/third_party/blink/renderer/core/fileapi/file_reader.h
+++ b/third_party/blink/renderer/core/fileapi/file_reader.h
@@ -63,6 +63,7 @@ class CORE_EXPORT FileReader final : public EventTargetWithInlineData,
 
   enum ReadyState { kEmpty = 0, kLoading = 1, kDone = 2 };
 
+  void readAsArrayBuffer(Blob*, unsigned int, ExceptionState&);
   void readAsArrayBuffer(Blob*, ExceptionState&);
   void readAsBinaryString(Blob*, ExceptionState&);
   void readAsText(Blob*, const String& encoding, ExceptionState&);
@@ -125,6 +126,7 @@ class CORE_EXPORT FileReader final : public EventTargetWithInlineData,
   LoadingState loading_state_;
   bool still_firing_events_;
 
+  unsigned int write_offset_ = 0;
   String blob_type_;
   scoped_refptr<BlobDataHandle> blob_data_handle_;
   FileReaderLoader::ReadType read_type_;
diff --git a/third_party/blink/renderer/core/fileapi/file_reader.idl b/third_party/blink/renderer/core/fileapi/file_reader.idl
index ab2c692417ef..e43b19d7ae62 100644
--- a/third_party/blink/renderer/core/fileapi/file_reader.idl
+++ b/third_party/blink/renderer/core/fileapi/file_reader.idl
@@ -38,6 +38,7 @@
     Exposed=(Window,Worker)
 ] interface FileReader : EventTarget {
     // async read methods
+    [RaisesException] void readAsArrayBuffer(Blob blob, unsigned long write_offset);
     [RaisesException] void readAsArrayBuffer(Blob blob);
     [RaisesException] void readAsBinaryString(Blob blob);
     [RaisesException] void readAsText(Blob blob, optional DOMString label);
diff --git a/third_party/blink/renderer/core/fileapi/file_reader_loader.cc b/third_party/blink/renderer/core/fileapi/file_reader_loader.cc
index 6bf6e8d9e9e1..b670acaf2781 100644
--- a/third_party/blink/renderer/core/fileapi/file_reader_loader.cc
+++ b/third_party/blink/renderer/core/fileapi/file_reader_loader.cc
@@ -97,6 +97,8 @@ void FileReaderLoader::Start(scoped_refptr<BlobDataHandle> blob_data) {
     return;
   }
 
+  producer_handle->SetWriteOffset(write_offset_);
+
   mojom::blink::BlobReaderClientPtr client_ptr;
   binding_.Bind(MakeRequest(&client_ptr));
   blob_data->ReadAll(std::move(producer_handle), std::move(client_ptr));
diff --git a/third_party/blink/renderer/core/fileapi/file_reader_loader.h b/third_party/blink/renderer/core/fileapi/file_reader_loader.h
index 6b5d8b3ec312..78e03ff408b7 100644
--- a/third_party/blink/renderer/core/fileapi/file_reader_loader.h
+++ b/third_party/blink/renderer/core/fileapi/file_reader_loader.h
@@ -103,6 +103,7 @@ class CORE_EXPORT FileReaderLoader : public mojom::blink::BlobReaderClient {
 
   void SetEncoding(const String&);
   void SetDataType(const String& data_type) { data_type_ = data_type; }
+  void SetWriteOffset(unsigned int write_offset) { write_offset_ = write_offset; }
 
   bool HasFinishedLoading() const { return finished_loading_; }
 
@@ -153,6 +154,7 @@ class CORE_EXPORT FileReaderLoader : public mojom::blink::BlobReaderClient {
   FileReaderLoaderClient* client_;
   WTF::TextEncoding encoding_;
   String data_type_;
+  unsigned int write_offset_ = 0;
 
   std::unique_ptr<ArrayBufferBuilder> raw_data_;
   bool is_raw_data_converted_ = false;
diff --git a/third_party/blink/renderer/modules/service_worker/fetch_event.cc b/third_party/blink/renderer/modules/service_worker/fetch_event.cc
index a499d4c22393..61048f52c5be 100644
--- a/third_party/blink/renderer/modules/service_worker/fetch_event.cc
+++ b/third_party/blink/renderer/modules/service_worker/fetch_event.cc
@@ -54,6 +54,17 @@ bool FetchEvent::isReload() const {
   return is_reload_;
 }
 
+void FetchEvent::respondWith(ScriptState* script_state,
+                             ScriptPromise script_promise,
+                             unsigned int read_offset,
+                             ExceptionState& exception_state) {
+  stopImmediatePropagation();
+  if (observer_) {
+    observer_->read_offset_ = read_offset;
+    observer_->RespondWith(script_state, script_promise, exception_state);
+  }
+}
+
 void FetchEvent::respondWith(ScriptState* script_state,
                              ScriptPromise script_promise,
                              ExceptionState& exception_state) {
diff --git a/third_party/blink/renderer/modules/service_worker/fetch_event.h b/third_party/blink/renderer/modules/service_worker/fetch_event.h
index 1bf70d4484bf..8d7f8cdf815e 100644
--- a/third_party/blink/renderer/modules/service_worker/fetch_event.h
+++ b/third_party/blink/renderer/modules/service_worker/fetch_event.h
@@ -62,6 +62,7 @@ class MODULES_EXPORT FetchEvent final
   String clientId() const;
   bool isReload() const;
 
+  void respondWith(ScriptState*, ScriptPromise, unsigned int, ExceptionState&);
   void respondWith(ScriptState*, ScriptPromise, ExceptionState&);
   ScriptPromise preloadResponse(ScriptState*);
 
diff --git a/third_party/blink/renderer/modules/service_worker/fetch_event.idl b/third_party/blink/renderer/modules/service_worker/fetch_event.idl
index 16e30dba8efc..599c8919a054 100644
--- a/third_party/blink/renderer/modules/service_worker/fetch_event.idl
+++ b/third_party/blink/renderer/modules/service_worker/fetch_event.idl
@@ -13,6 +13,6 @@
     readonly attribute DOMString clientId;
     readonly attribute boolean isReload;
 
-    [CallWith=ScriptState, RaisesException] void respondWith(Promise<Response> r);
+    [CallWith=ScriptState, RaisesException] void respondWith(Promise<Response> r, optional unsigned long read_offset);
     [CallWith=ScriptState] readonly attribute Promise<any> preloadResponse;
 };
diff --git a/third_party/blink/renderer/modules/service_worker/fetch_respond_with_observer.cc b/third_party/blink/renderer/modules/service_worker/fetch_respond_with_observer.cc
index 2aabdee38fbd..1a1310b81247 100644
--- a/third_party/blink/renderer/modules/service_worker/fetch_respond_with_observer.cc
+++ b/third_party/blink/renderer/modules/service_worker/fetch_respond_with_observer.cc
@@ -297,6 +297,8 @@ void FetchRespondWithObserver::OnResponseFulfilled(
     DCHECK(producer.is_valid());
     DCHECK(consumer.is_valid());
 
+    consumer->SetReadOffset(read_offset_);
+
     std::unique_ptr<WebServiceWorkerStreamHandle> body_stream_handle =
         std::make_unique<WebServiceWorkerStreamHandle>(std::move(consumer));
     ServiceWorkerGlobalScopeClient::From(GetExecutionContext())
diff --git a/third_party/blink/renderer/modules/service_worker/fetch_respond_with_observer.h b/third_party/blink/renderer/modules/service_worker/fetch_respond_with_observer.h
index 394d7e066ad7..ea62c10543b4 100644
--- a/third_party/blink/renderer/modules/service_worker/fetch_respond_with_observer.h
+++ b/third_party/blink/renderer/modules/service_worker/fetch_respond_with_observer.h
@@ -24,6 +24,8 @@ class MODULES_EXPORT FetchRespondWithObserver : public RespondWithObserver {
  public:
   ~FetchRespondWithObserver() override = default;
 
+  unsigned int read_offset_ = 0;
+
   static FetchRespondWithObserver* Create(
       ExecutionContext*,
       int fetch_event_id,
