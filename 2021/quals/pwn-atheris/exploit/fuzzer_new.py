#!/usr/local/bin/python3

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Ian Eldred Pudney

import atheris
with atheris.instrument_imports():
  import turbozipfile
  import zipfile
  import io
  import sys

@atheris.instrument_func
def sbcompare(left, right):
  if type(left) == str and type(right) == bytes:
    return left.encode("utf-8") == right
  if type(left) == bytes and type(right) == str:
    return left == right.encode("utf-8")
  return left == right

@atheris.instrument_func
def TestOneInput(data):
  with io.BytesIO(data) as f:
    try:
      pz = zipfile.ZipFile(f)
      fz = turbozipfile.ZipFile(f)
    except Exception as e:
      return

    pinfos = pz.infolist()
    finfos = fz.infolist()

    if len(pinfos) != len(finfos):
      raise RuntimeError("Info length disagreement")

    for i in range(len(pinfos)):
      pinfo = pinfos[i]
      finfo = finfos[i]

      if not sbcompare(pinfo.comment, finfo.comment):
        raise RuntimeError("comment disagreement")
      if pinfo.compress_size != finfo.compress_size:
        raise RuntimeError("compress_size disagreement")
      if pinfo.compress_type != finfo.compress_type:
        raise RuntimeError("compress_type disagreement")
      if pinfo.external_attr != finfo.external_attr:
        raise RuntimeError("external_attr disagreement")
      if pinfo.extra != finfo.extra:
        raise RuntimeError("extra disagreement")
      if pinfo.file_size != finfo.file_size:
        raise RuntimeError("file_size disagreement")
      if not sbcompare(pinfo.filename, finfo.filename):
        raise RuntimeError(f"filename disagreement: {pinfo.filename} {finfo.filename}")
        pass
      if pinfo.flag_bits != finfo.flag_bits:
        raise RuntimeError("flag_bits disagreement")
      if pinfo.header_offset != finfo.header_offset:
        raise RuntimeError("header_offset disagreement")
      if pinfo.internal_attr != finfo.internal_attr:
        raise RuntimeError("internal_attr disagreement")
      try:
        if pinfo.is_dir() != finfo.is_dir():
          raise RuntimeError("is_dir disagreement")
      except IndexError as e:
        pass
      #if not sbcompare(pinfo.orig_filename, finfo.orig_filename):
      #  raise RuntimeError(f"orig_filename disagreement: p'{pinfo.orig_filename}' f'{finfo.orig_filename}'")
        pass
      if pinfo.reserved != finfo.reserved:
        raise RuntimeError("reserved disagreement")
      if pinfo.volume != finfo.volume:
        raise RuntimeError("volume disagreement")

      try:
        with pz.open(pinfo) as g:
          pdata = g.read()
      except Exception as e:
        try:
          with fz.open(finfo) as g:
            fdata = g.read()
          raise
        except Exception as e:
          return

      with fz.open(finfo) as g:
        fdata = g.read()
      if pdata != fdata:
        raise RuntimeError(f"Data disagreement: {pdata} vs {fdata}")



atheris.Setup(sys.argv, TestOneInput)
atheris.Fuzz()
