// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Ian Eldred Pudney

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <pwd.h>
#include <grp.h>
#include <string>

using namespace std;

//const char* const unpriv_user = "bazel-buildfarm-executor";

int main(int argc, char** argv) {

  /*if (argc < 3) {
    std::cerr << "Usage: " << argv[0] << " chroot-dir command [args...]" << std::endl;
    return 1;
  }*/
  if (argc < 2) {
    std::cerr << "Usage: " << argv[0] << " command [args...]" << std::endl;
    return 1;
  }

  std::cout << "uid: " << getuid() << " euid: " << geteuid() << " gid: " << getgid() << " egid: " << getegid() << std::endl;

  /*passwd* user = getpwnam(unpriv_user);
  if (!user) {
    std::cerr << "error: " << strerror(errno) << std::endl;
    return 2;
  }
  auto* grp = getgrnam(unpriv_user);
  if (!grp) {
    std::cerr << "error: " << strerror(errno) << std::endl;
  }

  int target_gid = grp->gr_gid;
  int target_uid = user->pw_uid;*/
  int target_gid = getegid();
  int target_uid = geteuid();

  std::cout << "target_gid: " << target_gid << " target_uid: " << target_uid << std::endl;
  
  /*if (chroot(argv[1])) {
    std::cerr << "error: " << strerror(errno) << std::endl;
    return 3;
  }*/

  //std::cerr << "Chroot success" << std::endl;

  if (setresgid(target_gid, target_gid, target_gid) != 0) {
    std::cerr << "error: " << strerror(errno) << std::endl;
    return -1;
  }
  if (setresuid(target_uid, target_uid, target_uid) != 0) {
    std::cerr << "error: " << strerror(errno) << std::endl;
    return -2;
  }
  if (argc < 2) {
    std::cerr << "Requires arguments.";
    return -3;
  }
  struct passwd *pws;
  pws = getpwuid(geteuid());

  if (!pws) {
    std::cerr << "Got null from getpwuid(): " << strerror(errno) << std::endl;
    return 5;
  }
  
  /*if (std::string(pws->pw_name) != unpriv_user) {
    std::cerr << "Username not changed correctly: " << pws->pw_name << " vs " << unpriv_user << std::endl;
    return 4;
  }*/

  if (setenv("USER", pws->pw_name, 1)) {
    std::cerr << "Failed to set env: " << strerror(errno) << std::endl;
  }

  std::cout << "uid: " << getuid() << " euid: " << geteuid() << " gid: " << getgid() << " egid: " << getegid() << std::endl;
  
  //execvp(argv[2], argv+2);
  execvp(argv[1], argv+1);
  std::cerr << "Failed to start process " << argv[1] << ": " << strerror(errno) << std::endl;
  return -4;
}
