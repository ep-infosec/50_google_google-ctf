# Copyright 2019 Google LLC
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#   https://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys


BITMAP_HEIGHT = 10
flag = 'CTF{Up_d0WN_TAp_TAp_TAp_tHe_b1rd_g0Es_flaG_flaG_flaG}'
charmap = {
	'C':[[0,0,1,1,0],[0,1,0,0,1],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[0,1,0,0,1],[0,0,1,1,0],],
	'T':[[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],],
	'F':[[1,1,1,1,1],[1,0,0,0,0],[1,0,0,0,0],[1,1,1,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],],
	'{':[[0,0,1,1],[0,1,0,0],[0,1,0,0],[1,0,0,0],[0,1,0,0],[0,1,0,0],[0,0,1,1],],
	'}':[[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1],[0,0,1,0],[0,0,1,0],[1,1,0,0],],
	'U':[[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[0,1,1,1,0],],
	'p':[[0,0,0,0,0],[0,0,0,0,0],[0,1,1,1,0],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,1,1,1,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],],
	'_':[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[1,1,1,1,1],],
	'd':[[0,0,0,1],[0,0,0,1],[0,0,0,1],[0,1,1,1],[1,0,0,1],[1,0,0,1],[0,1,1,1],],
	'0':[[0,1,1,1,0],[1,0,0,0,1],[1,0,0,1,1],[1,0,1,0,1],[1,1,0,0,1],[1,0,0,0,1],[0,1,1,1,0],],
	'W':[[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,1,0,1],[1,0,1,0,1],[0,1,0,1,0],],
	'N':[[1,0,0,0,1],[1,1,0,0,1],[1,1,0,0,1],[1,0,1,0,1],[1,0,0,1,1],[1,0,0,1,1],[1,0,0,0,1],],
	'A':[[0,0,1,0,0],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1],[1,1,1,1,1],[1,0,0,0,1],[1,0,0,0,1],],
	't':[[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[1,1,1,1,0],[0,1,0,0,0],[0,1,0,0,1],[0,0,1,1,0],],
	'H':[[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,1,1,1,1],[1,0,0,0,1],[1,0,0,0,1],],
	'e':[[0,0,0,0,0],[0,0,0,0,0],[0,1,1,1,0],[1,0,0,0,1],[1,1,1,1,1],[1,0,0,0,0],[0,1,1,1,0],],
	'b':[[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,1,1,0],[1,0,0,1],[1,0,0,1],[1,1,1,0],],
	'1':[[0,0,1,0,0],[0,1,1,0,0],[1,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0],[1,1,1,1,1],],
	'r':[[0,0,0,0],[0,0,0,0],[1,1,1,0],[1,0,0,1],[1,0,0,0],[1,0,0,0],[1,0,0,0],],
	'g':[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,1,1,0,0],[1,0,0,1,0],[1,0,0,1,0],[0,1,1,1,0],[0,0,0,1,0],[1,0,0,1,0],[0,1,1,0,0],],
	'E':[[1,1,1,1,1],[1,0,0,0,0],[1,0,0,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,0,0,0,0],[1,1,1,1,1],],
	's':[[0,0,0,0],[0,0,0,0],[0,1,1,1],[1,0,0,0],[0,1,1,0],[0,0,0,1],[1,1,1,0],],
	'f':[[0,0,0,0,0],[0,0,0,0,0],[0,0,1,1,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[1,1,1,1,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],],
	'l':[[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[0,1,1],],
	'a':[[0,1,1,0],[1,0,0,1],[0,0,0,1],[0,1,1,1],[1,0,0,1],[1,0,0,1],[0,1,1,1],],
	'G':[[0,0,1,1,0],[0,1,0,0,1],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,1,1],[0,1,0,0,1],[0,0,1,1,1],]}
tile_letters = {
	0: 'm',
	1: 'M',
	2: 'n',
	3: 'N',
	4: 'o',
	5: 'O',
	6: 'p',
	7: 'P',
	8: 'q',
	9: 'Q',
	10: 'r',
	11: 'R',
	12: 's',
	13: 'S',
	14: 't',
	15: 'T',
}

def Print(bitmap):
	for row in bitmap:
		for pixel in row:
			sys.stdout.write(pixel)
		sys.stdout.write('\n')

def Build(text):
	bitmap = []
	for i in range(BITMAP_HEIGHT):
		bitmap.append([])

	for ch in text:
		mapping = charmap[ch]

		for bmp_row, ch_row, in zip(bitmap, mapping):
			bmp_row += ch_row
			bmp_row.append(0)
		for i in range(len(mapping), BITMAP_HEIGHT):
			bitmap[i] += [0] * (len(mapping[0]) + 1)

	for row in bitmap:
		if len(row) % 2 == 1:
			row.append(0)
	return bitmap

def Convert(bitmap):
	tilemap = []
	for y in range(BITMAP_HEIGHT // 2):
		tilemap.append([])

	for y in range(BITMAP_HEIGHT // 2):
		for x in range(len(bitmap[y]) // 2):
			tile_id = (
				8 * bitmap[y * 2][x * 2] +
				4 * bitmap[y * 2][x * 2 + 1] +
				2 * bitmap[y * 2 + 1][x * 2] +
				1 * bitmap[y * 2 + 1][x * 2 + 1])
			tilemap[y].append(tile_letters[tile_id])
	return tilemap


Print(Convert(Build(flag)))
