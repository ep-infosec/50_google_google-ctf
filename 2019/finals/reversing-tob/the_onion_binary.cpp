// -------------------------------------------------------------------------------------------------
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -------------------------------------------------------------------------------------------------
//
// Google CTF 2019 Finals - The Onion Binary (RE)
//
// * * * VM Emulator * * *
//
// This is the actual binary to crack.
//
// Compilation:
//      clang++ the_onion_binary.cpp -o the_onion_binary -O0 -s
//
// -------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <arpa/inet.h>
#include <iomanip>
#include <stack>
#include <map>

using namespace std;


// -------------------------------------------------------------------------------------------------
// MACRO declarations
//
/* Uncomment me to print debug information on each step */
// #define __DEBUG_EMULATOR__

/* Uncomment me to load VM from a file */
// #define __LOAD_VM_FROM_FILE__


// This MACRO is to enable log information to stdout, when VM runs in debug mode
#ifdef __DEBUG_EMULATOR__
    #define debug cout
#else
    // else is dead code so compiler will strip it away
    #define debug if (1) {} else cout
#endif

// cout abbreviations
#define HEX(num, pad) setfill('0') << setw(pad) << hex << num
#define DEC(num)      dec << num

// print mode constants
#define PRINT_MODE_REGISTER 0x1778
#define PRINT_MODE_STRING   0x654ec

// emulate a (set of) command(s) if the pace is appropriate
#define EMULATE_COND(cmds)                                  \
    if (ctx.pace & Context::PACE_MODE_EMULATE) {            \
        cmds;                                               \
    } else {                                                \
        debug << "\t" << "Pace is " << ctx.pace             \
              << ". instruction was not executed." << endl; \
    }


// -------------------------------------------------------------------------------------------------
// Global variables
//
// The execution context of the VM emulator
class Context {
public:
    // pace modes to emulate instructions
    enum pace_modes {
        PACE_MODE_NONE         = 0x0000,
        PACE_MODE_EMULATE      = 0x0001,
        PACE_MODE_SKIP_FORWARD = 0x0010,
        PACE_MODE_EMULATE_LOOP = PACE_MODE_EMULATE | 0x0100,
        PACE_MODE_REWIND       = 0x1000
    };

    uint64_t registers[26];                         // we have 26 registers (a-z)
    uint8_t  memory[65536];                         // we have 65KB of memory

    map<uint32_t, uint32_t> prev_pc;                // previous PC
    map<uint32_t, int> nest_status;                 // pace mode for each level
    stack<uint32_t> loop_nest_levels;               // nest levels for each loop

    int pace;                                       // current pace mode

} ctx;

// the VM program and its program counter

#ifdef __LOAD_VM_FROM_FILE__
uint8_t  vm_code[32768];
uint32_t vm_pc;

#else
uint32_t vm_pc = 9245;
uint8_t vm_code[] = {
    0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00,
    0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d,
    0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x9d, 0x9d, 0x87,
    0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43,
    0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d,
    0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87,
    0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c,
    0x8c, 0x9d, 0x8c, 0x8c, 0x84, 0x8c, 0x8c, 0x87, 0x8c, 0x84, 0x8c, 0x8c, 0x9d, 0x8c, 0x8c, 0x84,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87,
    0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64,
    0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84,
    0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
    0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x84, 0x84, 0x84,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x84, 0x84, 0x87,
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x9d, 0x9d,
    0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x9d,
    0x9d, 0x9d, 0x87, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x9d,
    0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87,
    0x87, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00,
    0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x9d,
    0x8c, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x87, 0x9d,
    0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d,
    0x87, 0x9d, 0x8c, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87,
    0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x9d, 0x8c, 0x9d, 0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x8c,
    0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d,
    0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x9d, 0x8c, 0x9d, 0x8c, 0x9d, 0x8c, 0x87,
    0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00,
    0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x8c,
    0x84, 0x8c, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c,
    0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c,
    0x87, 0x8c, 0x84, 0x8c, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87,
    0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x84,
    0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84,
    0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x8c, 0x84,
    0x8c, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x84,
    0x8c, 0x84, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x84,
    0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84,
    0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x84, 0x84, 0x84,
    0x84, 0x84, 0x84, 0x84, 0x84, 0x87, 0x87, 0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x84,
    0x84, 0x84, 0x87, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x87, 0x84,
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x87, 0x87, 0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87,
    0x84, 0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00,
    0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x9d, 0x9d, 0x9d, 0x9d,
    0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87, 0x87,
    0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x9d, 0x9d, 0x9d, 0x87, 0x87,
    0x87, 0x9d, 0x9d, 0x9d, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00,
    0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87,
    0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x9d, 0x8c, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x9d, 0x8c,
    0x9d, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x9d,
    0x8c, 0x9d, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87,
    0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87,
    0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x9d, 0x8c, 0x9d, 0x8c, 0x9d, 0x8c, 0x87, 0x87,
    0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x87,
    0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x8c, 0x9d, 0x8c, 0x87,
    0x8c, 0x9d, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43,
    0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x8c, 0x9d, 0x8c,
    0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x8c, 0x84, 0x8c, 0x87, 0x8c, 0x9d, 0x8c, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x8c, 0x84, 0x8c, 0x8c,
    0x9d, 0x8c, 0x8c, 0x84, 0x8c, 0x8c, 0x9d, 0x87, 0x8c, 0x84, 0x8c, 0x8c, 0x9d, 0x8c, 0x8c, 0x84,
    0x9d, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x8c, 0x9d, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87,
    0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x8c, 0x84, 0x8c,
    0x84, 0x8c, 0x84, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87,
    0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84, 0x8c, 0x87, 0x87, 0x87, 0x87, 0x8c, 0x84,
    0x8c, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87,
    0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x8c, 0x84, 0x87, 0x84, 0x8c, 0x84, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84,
    0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x8c, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87,
    0x87, 0x87, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x87, 0x84, 0x84, 0x84, 0x84,
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x87, 0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84,
    0x84, 0x84, 0x84, 0x87, 0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x84, 0x84, 0x84, 0x87,
    0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x84, 0x84, 0x87, 0x87, 0x87, 0x87, 0x84, 0x84,
    0x84, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64,
    0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x83, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
    0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x83, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x43, 0x00,
    0x00, 0x00, 0xe6, 0xd5, 0xc2, 0x87, 0xde, 0xc8, 0xd2, 0x87, 0xd5, 0xc2, 0xc6, 0xc3, 0xde, 0x98,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x66, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0xed, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x09, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x68, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xc8, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x6a, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xdd, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x6c, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xb0, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x6e, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x55, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x70, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x2a, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x72, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x65, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x74, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xcf, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x76, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x43, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x78, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xf5, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x7a, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x23, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x7c, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x2b, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x7e, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xa7, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x80, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0xf3, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x3b, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x82, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0xe1, 0x0d, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x77, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x14, 0x00,
    0x00, 0x43, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0xf0, 0xd5, 0xc8,
    0xc9, 0xc0, 0x87, 0xc1, 0xcb, 0xc6, 0xc0, 0x89, 0x87, 0xf4, 0xc8, 0xd5, 0xd5, 0xde, 0x87, 0x9d,
    0x8f, 0x00, 0x65, 0x00, 0x00, 0x00, 0xad, 0xde, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x14, 0x00, 0x00, 0x54, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0xf0, 0xd5, 0xc8, 0xc9, 0xc0, 0x87,
    0xc1, 0xcb, 0xc6, 0xc0, 0x89, 0x87, 0xf4, 0xc8, 0xd5, 0xd5, 0xde, 0x87, 0x9d, 0x8f, 0x00, 0x65,
    0x00, 0x00, 0x00, 0xad, 0xde, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64,
    0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04,
    0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x39, 0x14, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x65,
    0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0xf0, 0xd5, 0xc8, 0xc9, 0xc0, 0x87, 0xc1, 0xcb, 0xc6,
    0xc0, 0x89, 0x87, 0xf4, 0xc8, 0xd5, 0xd5, 0xde, 0x87, 0x9d, 0x8f, 0x00, 0x65, 0x00, 0x00, 0x00,
    0xad, 0xde, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
    0x44, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x39, 0x14, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00,
    0x43, 0x00, 0x00, 0x00, 0xf0, 0xd5, 0xc8, 0xc9, 0xc0, 0x87, 0xc1, 0xcb, 0xc6, 0xc0, 0x89, 0x87,
    0xf4, 0xc8, 0xd5, 0xd5, 0xde, 0x87, 0x9d, 0x8f, 0x00, 0x65, 0x00, 0x00, 0x00, 0xad, 0xde, 0x00,
    0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0x65, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x14, 0x00,
    0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
    0x00, 0x65, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xf8, 0x0c, 0x00,
    0x00, 0x05, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0a, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x39, 0x14, 0x00,
    0x00, 0x7d, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0xf0, 0xd5, 0xc8,
    0xc9, 0xc0, 0x87, 0xc1, 0xcb, 0xc6, 0xc0, 0x89, 0x87, 0xf4, 0xc8, 0xd5, 0xd5, 0xde, 0x87, 0x9d,
    0x8f, 0x00, 0x65, 0x00, 0x00, 0x00, 0xad, 0xde, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x11, 0x00,
    0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x34, 0x14, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xff, 0x0c, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xfb, 0x0c,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x12, 0x00,
    0x00, 0x00, 0xfb, 0x0c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x22, 0x00,
    0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xe4, 0x0d, 0x00, 0x00, 0xef, 0xbe, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xe6, 0x0d, 0x00, 0x00, 0x01, 0x01,
    0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x19, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x12, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0c, 0x00,
    0x00, 0x00, 0x34, 0x14, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xff, 0x0c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xe4, 0x0d, 0x00, 0x00, 0x41, 0x35,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x7b, 0xc9, 0x03, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x13, 0x00,
    0x00, 0x00, 0xe6, 0x0d, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x66, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x33, 0x09,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x34, 0x14, 0x00, 0x00, 0x20, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0d, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xff, 0x0c,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x14, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0xa9, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xe6, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x03, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x34, 0x14,
    0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x14, 0x00,
    0x00, 0x00, 0xff, 0x0c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xe5, 0x0d, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x15, 0x00,
    0x00, 0x00, 0xff, 0x0c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0xe6, 0x0d, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x33, 0x09, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x33, 0x09,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xc8, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xca, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x7f, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xcd, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x98, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xd0, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0xca, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x2c, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xd4, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0xa9, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xd7, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0xbf, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xd8, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0xba, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xdc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xdf, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x4a, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe0, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xe1, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe2, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x84, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe4, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xe5, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x81, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xe8, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xea, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xeb, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x89, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xec, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14,
    0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d,
    0x00, 0x00, 0xed, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xee, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x32, 0x09,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xe1, 0x0d, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x64, 0x00,
    0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x84, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe2, 0x0d,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x65, 0x00,
    0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0xf0, 0xd5, 0xc8, 0xc9, 0xc0, 0x87,
    0xc1, 0xcb, 0xc6, 0xc0, 0x89, 0x87, 0xf4, 0xc8, 0xd5, 0xd5, 0xde, 0x87, 0x9d, 0x8f, 0x00, 0x64,
    0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x19,
    0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x04,
    0x40, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x38, 0x14, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x66,
    0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0xfe, 0xc8, 0xd2, 0x87, 0xc0, 0xc8, 0xd3, 0x87, 0xce,
    0xd3, 0x87, 0xc5, 0xc6, 0xc5, 0xde, 0x86, 0x87, 0x9d, 0x8e, 0x00, 0x65, 0x00, 0x00, 0x00, 0xcc,
    0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x39,
    0x14, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0xf0,
    0xd5, 0xc8, 0xc9, 0xc0, 0x87, 0xc1, 0xcb, 0xc6, 0xc0, 0x89, 0x87, 0xf4, 0xc8, 0xd5, 0xd5, 0xde,
    0x87, 0x9d, 0x8f, 0x00, 0x65, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
    0xcc, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00

};
#endif

// -------------------------------------------------------------------------------------------------
// Selects a comparison operator.
//
inline string _operator(uint16_t op) {
    switch(op) {
        case 0x1434: return "<";
        case 0x1435: return ">";
        case 0x1436: return "<=";
        case 0x1437: return ">=";
        case 0x1438: return "==";
        case 0x1439: return "!=";
        default:
            debug << "Unknown operator" << op << endl;
            exit(0);
    }
}


// -------------------------------------------------------------------------------------------------
// Compares 2 values given a "string" operator.
//
inline bool compare(uint32_t val1, uint32_t op, uint32_t val2) {
    switch(op) {
        case 0x1434: return val1 <  val2;
        case 0x1435: return val1 >  val2;
        case 0x1436: return val1 <= val2;
        case 0x1437: return val1 >= val2;
        case 0x1438: return val1 == val2;
        case 0x1439: return val1 != val2;
        default:
            debug << "Unknown operator" << op << endl;
            exit(0);
    }
}


// -------------------------------------------------------------------------------------------------
// Unpacks a 32-bit word from bytecode.
//
inline uint32_t unpack(uint16_t pc) {
    uint32_t value = 0xffffffff;

    if (pc + 4 < vm_pc) {
        memcpy(&value, &vm_code[pc], 4);
    }

    return value;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates an instruction assignment instruction.
//
uint16_t mem_read(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             addr = unpack(pc + 12);

    debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " = *r_" << addr
          << " (" << (int)ctx.memory[ctx.registers[addr]] << ")" << endl;

    EMULATE_COND(ctx.registers[reg] = ctx.memory[ctx.registers[addr]]);

    return 2;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates an instruction assignment instruction.
//
uint16_t mem_write(uint16_t pc) {
    uint32_t nest = unpack(pc),
             addr = unpack(pc + 8),
             reg  = unpack(pc + 12);

    debug << HEX(pc, 4) << "h: (" << nest << ") *r_" << addr << " = r_" << reg
          << " (0x" << (int)ctx.registers[addr] << " <-- 0x"
          << (int)ctx.registers[reg] << ")" << endl;

    EMULATE_COND(ctx.memory[ctx.registers[addr]] = ctx.registers[reg]);

    return 2;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates an instruction assignment instruction.
//
uint16_t mov(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             type = unpack(pc + 12),
             val  = unpack(pc + 16);

    if (type == 0xcff) {
        // R-value is a register
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " = r_" << val << endl;

        EMULATE_COND(ctx.registers[reg] = ctx.registers[val]);
    } else if (type == 0xde1) {
        // R-value is a constant
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " = 0x" << val << endl;

        EMULATE_COND(ctx.registers[reg] = val);
    }

    return 3;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates an addition instruction.
//
uint16_t add(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             type = unpack(pc + 12),
             val  = unpack(pc + 16);

    if (type == 0xcfe) {
        // R-value is a register
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " += r_" << val << endl;

        EMULATE_COND(ctx.registers[reg] += ctx.registers[val]);
    } else if (type == 0xde2) {
        // R-value is a constant
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " += 0x" << val << endl;

        EMULATE_COND(ctx.registers[reg] += val);
    }

    return 3;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates a subtraction instruction.
//
uint16_t sub(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             type = unpack(pc + 12),
             val  = unpack(pc + 16);

    if (type == 0xcfd) {
        // R-value is a register
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " -= r_" << val << endl;

        EMULATE_COND(ctx.registers[reg] -= ctx.registers[val]);
    } else if (type == 0xde3) {
        // R-value is a constant
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " -= 0x" << val << endl;

        EMULATE_COND(ctx.registers[reg] -= val);
    }

    return 3;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates a multiplication instruction.
//
uint16_t mul(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             type = unpack(pc + 12),
             val  = unpack(pc + 16);

    if (type == 0xcfb) {
        // R-value is a register
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " *= r_" << val << endl;

        EMULATE_COND(ctx.registers[reg] *= ctx.registers[val]);
    } else if (type == 0xde4) {
        // R-value is a constant
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " *= 0x" << val << endl;

        EMULATE_COND(ctx.registers[reg] *= val);
    }

    return 3;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates a division instruction.
//
uint16_t div(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             type = unpack(pc + 12),
             val  = unpack(pc + 16);

    if (type == 0xcfa) {
        // R-value is a register
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " /= r_" << val << endl;

        EMULATE_COND(ctx.registers[reg] /= ctx.registers[val]);
    } else if (type == 0xde5) {
        // R-value is a constant
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " /= 0x" << val << endl;

        EMULATE_COND(ctx.registers[reg] /= val);
    }

    return 3;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates a modulo division instruction.
//
uint16_t mod(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             type = unpack(pc + 12),
             val  = unpack(pc + 16);

    if (type == 0xcf9) {
        // R-value is a register
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " %= r_" << val << endl;

        EMULATE_COND(ctx.registers[reg] %= ctx.registers[val]);
    } else if (type == 0xde6) {
        // R-value is a constant
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " %= 0x" << val << endl;

        EMULATE_COND(ctx.registers[reg] %= val);
    }

    return 3;
}


// -------------------------------------------------------------------------------------------------
// Arithmetic: Emulates an exclusive OR instruction.
//
uint16_t _xor(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             type = unpack(pc + 12),
             val  = unpack(pc + 16);

    if (type == 0xcf8) {
        // R-value is a register
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " ^= r_" << val << endl;

        EMULATE_COND(ctx.registers[reg] ^= ctx.registers[val]);
    } else if (type == 0xde7) {
        // R-value is a constant
        debug << HEX(pc, 4) << "h: (" << nest << ") r_" << reg << " ^= 0x" << val << endl;

        EMULATE_COND(ctx.registers[reg] ^= val);
    }

    return 3;
}


// -------------------------------------------------------------------------------------------------
// I/O: Prints a register or a statement to stdout.
//
uint16_t print(uint16_t pc, int mode) {
    uint32_t nest = unpack(pc);

    if (mode == PRINT_MODE_REGISTER) {
        uint32_t reg = unpack(pc + 8);

        debug << HEX(pc, 4) << "h: (" << nest << ") print r_" << reg << endl;

        EMULATE_COND(
#ifdef __DEBUG_EMULATOR__
            cout << "[VM OUT]: " << ctx.registers[reg] << endl;
#else
            cout << ctx.registers[reg] << endl;
#endif
        );

        return 4;

    } else if (mode == PRINT_MODE_STRING) {
        char msg[256];

        memset(msg, 0, 256);

        for (int i=0; vm_code[pc + 8 + i]; ++i) {
            memcpy(&msg[i], &vm_code[pc + 8 + i], 1);

            // Decode character
            msg[i] ^= 0xa7;
        }

        debug << HEX(pc, 4) << "h: (" << nest << ") print '" << msg << "'\n";

        EMULATE_COND(
#ifdef __DEBUG_EMULATOR__
            cout << "[VM OUT]: " << msg << endl;
#else
            cout << msg << endl;
#endif
        );

        return 4 + strlen(msg) + 1;
    }

    return -1;
}


// -------------------------------------------------------------------------------------------------
// I/O: Reads a character (8-bit) value from stdin and stores it to a register (scanf).
//
uint16_t read(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8);
    char ch;

    debug << HEX(pc, 4) << "h: (" << nest << ") read r_" << reg << endl;

    EMULATE_COND(
        cin >> ch;

#ifdef __DEBUG_EMULATOR__
        debug << "[VM IN]: " << ch << "\n";
#endif

        ctx.registers[reg] = ch;
    );

    return 4;
}


// -------------------------------------------------------------------------------------------------
// Conditional: Emulates an if statement.
//
uint16_t if_cond(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             op   = unpack(pc + 12),
             val  = unpack(pc + 16);

    debug << HEX(pc, 4) << "h: (" << nest << ") if (r_" << reg << " " << _operator(op)
          << " " << val << ") {" << "\t(" << ctx.registers[reg] << ")" << endl;

    EMULATE_COND(
        if (compare(ctx.registers[reg], op, val)) {
            // if statement is true. Take no action and execute istt.
            debug << "if statement is *true*" << endl;

            ctx.nest_status[nest] = Context::PACE_MODE_EMULATE;
        } else {
            // if statement is false. Skip all instructions with the same nest level.
            // A neat trick to do this is, is to still emulate the instructions but ignore
            // any operations.
            debug << "if statement is *false*" << endl;

            ctx.nest_status[nest] = Context::PACE_MODE_SKIP_FORWARD;
        }
    );

    return 3;
}


// -------------------------------------------------------------------------------------------------
// Conditional: Emulates a while loop.
//
uint16_t while_loop(uint16_t pc) {
    uint32_t nest = unpack(pc),
             reg  = unpack(pc + 8),
             op   = unpack(pc + 12),
             val  = unpack(pc + 16);

    debug << HEX(pc, 4) << "h: (" << nest << ") while (r_" << reg << " " << _operator(op)
          << " " << val << ") {" << endl;

    EMULATE_COND(
        if (compare(ctx.registers[reg], op, val)) {
            // while condition is true. Make sure that when you reach the bottom you will rewind.
            debug << "while condition is *true*" << endl;

            ctx.nest_status[nest] = Context::PACE_MODE_EMULATE_LOOP;
            ctx.loop_nest_levels.push(nest);
        } else {
            // while condition is false. Skip all instructions with the same nest level as
            // you did with the false if statement.
            debug << "while condition is *false*" << endl;

            ctx.nest_status[nest] = Context::PACE_MODE_SKIP_FORWARD;

            if (!ctx.loop_nest_levels.empty()) {
                if (ctx.loop_nest_levels.top() == nest) {
                    ctx.loop_nest_levels.pop();
                } else {
                    // this should not happen
                    debug << "An expected error occurred. Please investigate." << endl;
                    exit(0);
                }
            }
        }
    );

    return 3;
}


// -------------------------------------------------------------------------------------------------
// Special: Emulates a break statement.
//
uint16_t break_stmt(uint16_t pc) {
    uint32_t nest = unpack(pc);

    debug << HEX(pc, 4) << "h: (" << nest << ") break" << endl;

    // Simply skip the remaining of the loop.
    EMULATE_COND(
        // skip the remaining of the loop
        ctx.nest_status[nest] = Context::PACE_MODE_SKIP_FORWARD;
    );

    return 0;
}


// -------------------------------------------------------------------------------------------------
// Special: Emulates a continue statement.
//
uint16_t continue_stmt(uint16_t pc) {
    uint32_t nest = unpack(pc);

    debug << HEX(pc, 4) << "h: (" << nest << ") continue" << endl;

    EMULATE_COND(
        // special mode. Assume that you're at the end of the loop and roll back.
        ctx.nest_status[nest] = Context::PACE_MODE_REWIND;
    );

    return 0;
}


// -------------------------------------------------------------------------------------------------
// Special: Emulates a no-op statement.
//
uint16_t nop_stmt(uint16_t pc) {
    uint32_t nest = unpack(pc);

    debug << HEX(pc, 4) << "h: (" << nest << ") nop" << endl;

    return 0;
}


// -------------------------------------------------------------------------------------------------
// Special: Halts VM execution.
//
uint16_t halt_stmt(uint16_t pc) {
    EMULATE_COND(exit(0));

    return 0;
}


// -------------------------------------------------------------------------------------------------
// Dispatches the next instruction from the vm bytecode.
//
uint16_t insn_dispatcher(uint16_t pc) {
    uint16_t inc = 0;
    uint32_t nest_level = vm_code[pc];


    // If there's no pace mode set, assign the pace mode from previous instruction
    if (ctx.nest_status[nest_level] == Context::PACE_MODE_NONE) {
        ctx.nest_status[nest_level] = ctx.nest_status[vm_code[ctx.prev_pc[pc]]];
    }


    // Check if the previous instruction was in the emulate-loop pace
    if (ctx.nest_status[vm_code[ctx.prev_pc[pc]]] == Context::PACE_MODE_EMULATE_LOOP) {
        // Check if current instruction is outside of the loop
        if (!ctx.loop_nest_levels.empty() && nest_level < ctx.loop_nest_levels.top()) {
            // Check if we should roll back to the beginning of the loop
            if (vm_code[ctx.prev_pc[pc]] > nest_level) {
                uint32_t p;

                for (p=pc; vm_code[ctx.prev_pc[p]]>nest_level; p=ctx.prev_pc[p]) {
                    debug << "Rolling back " << p << " : " << (int)vm_code[p] << endl;
                }

                pc = p;
            }
        }
    }

    // Delete all nest levels that are deeper than current one
    for (auto ii=ctx.nest_status.begin(); ii!=ctx.nest_status.end(); ) {
        if (ii->first > nest_level) {
            ii = ctx.nest_status.erase(ii);
        } else {
            ++ii;
        }
    }


    // After adjustments, assign the right pace mode
    if (ctx.nest_status[nest_level] == Context::PACE_MODE_EMULATE) {
        ctx.pace = Context::PACE_MODE_EMULATE;

    } else if (ctx.nest_status[nest_level] == Context::PACE_MODE_SKIP_FORWARD) {
        ctx.pace = Context::PACE_MODE_SKIP_FORWARD;

    } else if (ctx.nest_status[nest_level] == Context::PACE_MODE_EMULATE_LOOP) {
        ctx.pace = Context::PACE_MODE_EMULATE_LOOP;

    } else if (ctx.nest_status[nest_level] == Context::PACE_MODE_REWIND) {
        uint32_t p;

        debug << "Rewind! " << nest_level << " : " << (int)vm_code[ctx.prev_pc[pc]] << endl;

        for (p=pc; vm_code[ctx.prev_pc[p]]>=nest_level; p=ctx.prev_pc[p]) {
            debug << "Rolling back " << p << " : " << (int)vm_code[p] << endl;
        }

        pc = p;

        // After rewind to the beginning of the loop, continue in emulate-loop pace
        ctx.pace = Context::PACE_MODE_EMULATE_LOOP;

    } else {
        // ctx.pace = ctx.nest_status[nest_level];
        debug << "This should never be executed." << endl;
        exit(-1);
    }


    /* TODO: Dispatcher operates trivially. Obfuscate it. */
    switch(unpack(pc + 4)) {
        // Dispatch memory I/O instructions
        case 0x932  : inc = mem_read(pc)*4 + 4;  break;
        case 0x933  : inc = mem_write(pc)*4 + 4; break;

        // Dispatch arithmetic instructions
        case 0x85   : inc = mov(pc)*4 + 4;  break;
        case 0x88   : inc = add(pc)*4 + 4;  break;
        case 0x136  : inc = sub(pc)*4 + 4;  break;
        case 0x22   : inc = mul(pc)*4 + 4;  break;
        case 0x93   : inc = div(pc)*4 + 4;  break;
        case 0x1000 : inc = mod(pc)*4 + 4;  break;
        case 0x10001: inc = _xor(pc)*4 + 4; break;

        // Dispatch I/O instructions
        case 0x42: inc = print(pc, PRINT_MODE_REGISTER) + 4; break;
        case 0x43: inc = print(pc, PRINT_MODE_STRING); break;
        case 0x44: inc = read(pc) + 4; break;

        // Dispatch conditionals
        case 0x4004: inc = if_cond(pc)*4 + 4;    break;
        case 0x11  : inc = while_loop(pc)*4 + 4; break;

        // Special instructions
        case 0x7   : inc = break_stmt(pc) + 4;    break;
        case 0x1   : inc = continue_stmt(pc) + 4; break;
        case 0xcc  : inc = nop_stmt(pc) + 4;      break;
        case 0xdead: inc = halt_stmt(pc) + 4;     break;
        case 0xffff: debug << "[program exits]" << endl; return 0xffff;

        // Dispatch random instructions
        default:
            // TODO(Obfuscate): emulate random instructions
            debug << "Unknown instruction. pc: " << pc << ",  opcode: " << (int)vm_code[pc] << endl;
            exit(0);
    }

    // Store instruction size.
    // (do it in a more complicated way by storing the address of the previous pc)
    if (ctx.prev_pc.find(pc + inc + 4) == ctx.prev_pc.end()) {
        ctx.prev_pc[pc + inc + 4] = pc;
    }

    return pc + inc + 4;
}


// -------------------------------------------------------------------------------------------------
// Emulator's main routine.
//
int main(int argc, char *argv[]) {

// Load byte code from file
#ifdef __LOAD_VM_FROM_FILE__
    ifstream myfile("crackme.bin", ios::binary);

    while (!myfile.eof()) {
        // (be cautious on how to read characters like \n)
        myfile.read((char*)&vm_code[vm_pc++], 1);
    }

    myfile.close();
#endif

#ifdef __DEBUG_EMULATOR__
    // Print byte code
    cout << "VM bytecode:" << endl;

    for (int pc=0; pc<vm_pc; ++pc) {
        if (pc % 16 == 0)     cout << "\n\t";
        else if (pc % 4 == 0) cout << "- ";

        cout << hex << setfill('0') << setw(2) << (int)vm_code[pc] << " ";
    }

    cout << endl << endl;
#endif


    // Initialize pace mode
    ctx.pace = Context::PACE_MODE_EMULATE;
    ctx.nest_status[vm_code[0]] = Context::PACE_MODE_EMULATE;

    // Do the actual VM code emulation
    uint16_t inc=1;

    for (int i=0; ; i=inc) {
        inc = insn_dispatcher(i);

        if (inc == 0xffff) {
            break;
        }
    }

    return 0;
}

// -------------------------------------------------------------------------------------------------
